import numpy as np
from scipy.spatial import ConvexHull
from stl import mesh

# 获取模型与平面的相交截面
def get_intersection_section(model, plane_point, plane_normal):
    section_points = []
    for triangle in model.vectors:
        intersection = []
        for i in range(3):
            p1 = triangle[i]
            p2 = triangle[(i + 1) % 3]
            t = np.dot(plane_point - p1, plane_normal) / np.dot(p2 - p1, plane_normal)
            if 0 <= t <= 1:
                intersection.append(p1 + t * (p2 - p1))
        if len(intersection) == 2:
            section_points.append(intersection[0])
            section_points.append(intersection[1])
    return np.array(section_points)

# 计算截面面积
def compute_section_area(section_points):
    if len(section_points) < 3:
        return 0
    hull = ConvexHull(section_points, qhull_options='QJ')  # 使用点扰动来解决凸包构建的精度问题
    return hull.volume

# 分割模型
def split_model(model, plane_point, plane_normal):
    above_vertices = []
    below_vertices = []
    for triangle in model.vectors:
        above = []
        below = []
        for vertex in triangle:
            if np.dot(vertex - plane_point, plane_normal) > 0:
                above.append(vertex)
            else:
                below.append(vertex)
        if len(above) == 3:
            above_vertices.append(triangle)
        elif len(below) == 3:
            below_vertices.append(triangle)

    return np.array(above_vertices), np.array(below_vertices)

# 计算牙齿的中心和纵向长轴
def compute_long_axis(model):
    vertices = model.vectors.reshape(-1, 3)
    num_vertices = len(vertices)
    centroid = np.mean(vertices, axis = 0)
    inertia_tensor = np.zeros((3,3))
    for vertex in vertices:
        relative_position = vertex - centroid
        inertia_tensor[0,0]+=(relative_position[1]**2 + relative_position[2]**2)
        inertia_tensor[1,1]+=(relative_position[0]**2 + relative_position[2]**2)
        inertia_tensor[2,2]+=(relative_position[0]**2 + relative_position[1]**2)
        inertia_tensor[0,1]-=(relative_position[0]*relative_position[1])
        inertia_tensor[0,2]-=(relative_position[0]*relative_position[2])
        inertia_tensor[1,2]-=(relative_position[1]*relative_position[2])
    inertia_tensor[1,0] = inertia_tensor[0,1]
    inertia_tensor[2,0] = inertia_tensor[0,2]
    inertia_tensor[2,1] = inertia_tensor[1,2]
    eigenvalues, eigenvectors = np.linalg.eig(inertia_tensor)
    max_index = np.argmax(eigenvalues)
    long_axis = eigenvectors[:,max_index]
    return centroid, long_axis

# 迭代
def find_max_section(model, center, long_axis, max_iterations=10, step_size=0.1):
    z_min = np.min(model.vectors[:, :, 2])
    z_max = np.max(model.vectors[:, :, 2])
    max_area = 0
    max_section_points = []
    max_plane_point = None
    for z in np.linspace(z_min, z_max, 100):  # 设置平面高度
        plane_point = center + z * long_axis  # 平面上的点
        section_points = get_intersection_section(model, plane_point, long_axis)
        section_area = compute_section_area(section_points)
        if section_area > max_area:
            max_area = section_area
            max_section_points = section_points
            max_plane_point = plane_point

    # 迭代优化
    for _ in range(max_iterations):
        z_range = np.linspace(max_plane_point[2] - step_size, max_plane_point[2] + step_size, 10)
        for z in z_range:
            plane_point = center + z * long_axis
            section_points = get_intersection_section(model, plane_point, long_axis)
            section_area = compute_section_area(section_points)
            if section_area > max_area:
                max_area = section_area
                max_section_points = section_points
                max_plane_point = plane_point

    return max_section_points, max_plane_point
