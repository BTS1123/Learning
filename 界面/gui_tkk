#1.热力图显示时没有在幕布处，而是占据了整个界面导致控制界面被挤压，只有将界面最大化才能看见右侧的菜单栏
#啊啊啊啊第一个问题解决了嘻嘻
#2.进度条太粗糙了，可以细化一下。单个处理的只会显示33%，而批量处理一个文件完成一个进度显示倒也还算是可以
import os
import sys
import time
import ttkbootstrap as ttk
from ttkbootstrap.constants import *
import tkinter as tk
from tkinter import filedialog, messagebox
import batch_process
import matplotlib.pyplot as plt
from vtk_viewer import open_vtk_viewer
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from stl_processing import load_stl, save_stl, split_model
from section_analysis import compute_long_axis, find_max_section, plot_heatmap_on_section

class STLProcessingApp:
    def __init__(self, root):
        self.root = root
        self.root.title("STL File Processing Tool")
        self.root.geometry("1080x800")
        self.root.resizable(True, True)

        self.root.protocol("WM_DELETE_WINDOW", self.on_close)

        self.mode = "single"
        self.selected_file = None
        self.selected_folder = None
        self.stl_save_directory_single = None
        self.stl_save_directory_batch = None
        self.heatmap_save_directory_single = None
        self.heatmap_save_directory_batch = None

        self.vtk_widget = None
        self.create_widgets()

    def switch_mode(self):
        if self.mode == "single":
            self.mode = "batch"
            messagebox.showinfo("模式切换", "已切换到【批量处理模式】")
        else:
            self.mode = "single"
            messagebox.showinfo("模式切换", "已切换到【单独处理模式】")

        self.update_buttons()

    def update_buttons(self):
        for widget in self.control_frame.winfo_children():
            widget.destroy()

        self.switch_var = ttk.BooleanVar(value=0 if self.mode == "single" else 1)
        self.switch_btn = ttk.Checkbutton(
            self.control_frame, text="批量处理",
            variable=self.switch_var, command=self.switch_mode,
            style="success.TCheckbutton",
            bootstyle=TOGGLE
        )
        self.switch_btn.pack(pady=10, fill=ttk.X, padx=10)

        # 添加标注
        self.label_default_mode = ttk.Label(
            self.control_frame, text="系统默认单独处理",
            style="secondary.TLabel"
        )
        self.label_default_mode.pack(pady=5, fill=ttk.X, padx=10)

        if self.mode == "single":
            self.btn_select_file = ttk.Button(self.control_frame, text="请选择文件处理", command=self.select_stl_file, style="primary.TButton")
            self.btn_select_file.pack(pady=10, fill=ttk.X, padx=10)
        else:
            self.btn_batch_process = ttk.Button(self.control_frame, text="请选择文件夹批量处理", command=self.batch_process, style="primary.TButton")
            self.btn_batch_process.pack(pady=10, fill=ttk.X, padx=10)

        self.btn_select_stl_save = ttk.Button(self.control_frame, text="选择STL文件存储位置", command=self.select_stl_save_directory, style="secondary.TButton")
        self.btn_select_stl_save.pack(pady=10, fill=ttk.X, padx=10)

        self.btn_select_heatmap_save = ttk.Button(self.control_frame, text="选择热力图生成位置", command=self.select_heatmap_save_directory, style="secondary.TButton")
        self.btn_select_heatmap_save.pack(pady=10, fill=ttk.X, padx=10)

        self.btn_process_file = ttk.Button(self.control_frame, text="处理文件", command=self.process_file, style="success.TButton")
        self.btn_process_file.pack(pady=10, fill=ttk.X, padx=10)

        self.btn_open_heatmap = ttk.Button(self.control_frame, text="打开投影图", command=self.open_heatmap, style="warning.TButton")
        self.btn_open_heatmap.pack(pady=10, fill=ttk.X, padx=10)

        self.btn_view_stl = ttk.Button(self.control_frame, text="STL文件三维展示", command=self.select_and_view_stl, style="info.TButton")
        self.btn_view_stl.pack(pady=10, fill=ttk.X, padx=10)

    def create_widgets(self):
        self.root.columnconfigure(0, weight=1)  # 配置列权重
        self.root.rowconfigure(0, weight=1)  # 配置行权重

        self.canvas_frame = ttk.Frame(self.root, width=800, height=800)
        self.canvas_frame.grid(row=0, column=0, sticky="nsew")  # 使用 grid 布局

        self.control_frame = ttk.Frame(self.root, width=280, bootstyle="light")
        self.control_frame.grid(row=0, column=1, sticky="ns")  # 使用 grid 布局

        self.update_buttons()

    def select_and_view_stl(self):
        self.selected_view_file = filedialog.askopenfilename(filetypes=[("STL Files", "*.stl")])
        if self.selected_view_file:
            open_vtk_viewer(self.selected_view_file)

    def select_stl_file(self):
        self.selected_file = filedialog.askopenfilename(filetypes=[("STL Files", "*.stl")])
        if self.selected_file:
            messagebox.showinfo("文件已选择", f"已选择文件: {self.selected_file}")

    def select_stl_save_directory(self):
        folder = filedialog.askdirectory()
        if folder:
            if self.mode == "single":
                self.stl_save_directory_single = folder
                messagebox.showinfo("保存路径", f"单独处理的 STL 存储路径: {folder}")
            else:
                self.stl_save_directory_batch = folder
                messagebox.showinfo("保存路径", f"批量处理的 STL 存储路径: {folder}")

    def select_heatmap_save_directory(self):
        folder = filedialog.askdirectory()
        if folder:
            if self.mode == "single":
                self.heatmap_save_directory_single = folder
                messagebox.showinfo("保存路径", f"单独处理的热力图存储路径: {folder}")
            else:
                self.heatmap_save_directory_batch = folder
                messagebox.showinfo("保存路径", f"批量处理的热力图存储路径: {folder}")

    def open_heatmap(self):
        heatmap_file = filedialog.askopenfilename(filetypes=[("PNG Files", "*.png")])
        if not heatmap_file:
            messagebox.showwarning("警告", "请先选择投影图文件！")
            return

        try:
            # 清除 canvas_frame 中的所有部件
            for widget in self.canvas_frame.winfo_children():
                widget.destroy()

            fig, ax = plt.subplots(figsize=(6, 6))
            img = plt.imread(heatmap_file)
            ax.imshow(img)
            ax.axis('off')

            canvas = FigureCanvasTkAgg(fig, master=self.canvas_frame)
            canvas.draw()
            # 将画布添加到 canvas_frame 中，并且不影响右侧的 control_frame
            canvas.get_tk_widget().grid(row=0, column=0, sticky="nsew")  # 使用 grid 布局

        except Exception as e:
            messagebox.showerror("错误", f"无法打开投影图: {str(e)}")

    def process_file(self):
        if self.mode == "single":
            if not self.selected_file:
                messagebox.showwarning("警告", "请先选择 STL 文件！")
                return
            if not self.stl_save_directory_single or not self.heatmap_save_directory_single:
                messagebox.showwarning("警告", "请先选择 STL 和 热力图的存储位置！")
                return

            progress_window = ttk.Toplevel(self.root)
            progress_window.title("处理进度")
            progress_window.geometry("400x150")

            progress_label = ttk.Label(progress_window, text="正在处理，请稍候...")
            progress_label.pack(pady=10)

            progress_bar = ttk.Progressbar(progress_window, orient="horizontal", length=300, mode="determinate")
            progress_bar.pack(pady=10, fill=ttk.X, padx=20)

            progress_bar["value"] = 0
            self.root.update_idletasks()

            def process_single_file():
                try:
                    # 假设 process_single_stl 函数的处理过程可以拆分为 3 个步骤
                    total_steps = 3
                    for step in range(total_steps):
                        if step == 0:
                            # 第一步：加载 STL 文件
                            load_stl(self.selected_file)
                        elif step == 1:
                            # 第二步：处理 STL 文件
                            batch_process.process_single_stl(self.selected_file, self.stl_save_directory_single, self.heatmap_save_directory_single)
                        else:
                            # 第三步：保存处理结果
                            pass
                        progress = int((step + 1) / total_steps * 100)
                        progress_bar["value"] = progress
                        progress_label.config(text=f"处理进度: {progress}%")
                        self.root.update_idletasks()

                    progress_bar["value"] = 100
                    progress_label.config(text="处理完成！")
                    self.root.update_idletasks()
                    messagebox.showinfo("完成", "单个文件处理完成！")
                except Exception as e:
                    messagebox.showerror("错误", f"处理文件时出错: {str(e)}")
                finally:
                    progress_window.destroy()

            # 使用线程来处理文件，避免界面卡顿
            import threading
            threading.Thread(target=process_single_file).start()

        else:
            if not self.selected_folder:
                messagebox.showwarning("警告", "请先选择批量处理的文件夹！")
                return
            if not self.stl_save_directory_batch or not self.heatmap_save_directory_batch:
                messagebox.showwarning("警告", "请先选择 STL 和 热力图的存储位置！")
                return

            stl_files = [f for f in os.listdir(self.selected_folder) if f.endswith(".stl")]
            total_files = len(stl_files)
            if total_files == 0:
                messagebox.showwarning("警告", "未找到 STL 文件！")
                return

            progress_window = ttk.Toplevel(self.root)
            progress_window.title("处理进度")
            progress_window.geometry("400x150")

            progress_label = ttk.Label(progress_window, text="正在批量处理，请稍候...")
            progress_label.pack(pady=10)

            progress_bar = ttk.Progressbar(progress_window, orient="horizontal", length=300, mode="determinate")
            progress_bar.pack(pady=10, fill=ttk.X, padx=20)

            progress_bar["value"] = 0
            self.root.update_idletasks()

            def process_batch_files():
                try:
                    for idx, file_name in enumerate(stl_files):
                        file_path = os.path.join(self.selected_folder, file_name)
                        batch_process.process_single_stl(file_path, self.stl_save_directory_batch, self.heatmap_save_directory_batch)
                        progress = int((idx + 1) / total_files * 100)
                        progress_bar["value"] = progress
                        progress_label.config(text=f"处理进度: {progress}%")
                        self.root.update_idletasks()

                    progress_bar["value"] = 100
                    progress_label.config(text="处理完成！")
                    self.root.update_idletasks()
                    messagebox.showinfo("完成", "批量处理已完成！")
                except Exception as e:
                    messagebox.showerror("错误", f"处理文件时出错: {str(e)}")
                finally:
                    progress_window.destroy()

            # 使用线程来处理文件，避免界面卡顿
            import threading
            threading.Thread(target=process_batch_files).start()

    def batch_process(self):
        folder = filedialog.askdirectory(title="选择包含 STL 文件的文件夹")
        if folder:
            self.selected_folder = folder
            messagebox.showinfo("文件夹已选择", f"批量处理目标文件夹: {folder}")

    def on_close(self):
        self.root.destroy()
        os._exit(0)

if __name__ == "__main__":
    root = ttk.Window(themename="litera")
    app = STLProcessingApp(root)
    root.mainloop()
